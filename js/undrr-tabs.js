/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _React = React,
    useCallback = _React.useCallback,
    useEffect = _React.useEffect;
var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType,
    createBlock = blocks.createBlock;
var dispatch = data.dispatch,
    select = data.select,
    useDispatch = data.useDispatch;
var Fragment = element.Fragment;
var Button = components.Button,
    PanelBody = components.PanelBody,
    BaseControl = components.BaseControl,
    Icon = components.Icon,
    RangeControl = components.RangeControl,
    TextControl = components.TextControl,
    IconButton = components.IconButton,
    Toolbar = components.Toolbar,
    SelectControl = components.SelectControl;
var InnerBlocks = blockEditor.InnerBlocks,
    RichText = blockEditor.RichText,
    InspectorControls = blockEditor.InspectorControls,
    PanelColorSettings = blockEditor.PanelColorSettings,
    BlockControls = blockEditor.BlockControls,
    useBlockProps = blockEditor.useBlockProps;

var __ = Drupal.t;

var undrrTabsSettings = {
  title: __('UNDRR Tabs block'),
  description: __('A tabs container'),
  icon: 'admin-site-alt3',
  supports: {
    align: false,
    className: false,
    customClassName: false,
    html: false
  },
  attributes: {
    ver: {
      type: 'string'
    },
    dirty: {
      type: 'integer',
      default: 0
    },
    tabs: {
      type: 'array',
      default: []
    },
    title: {
      type: 'string'
    },
    subtitle: {
      type: 'string'
    },
    heroHeight: {
      type: 'integer'
    },
    heroVariant: {
      type: 'string'
    },
    text: {
      type: 'string'
    },
    allowedTypes: {
      type: 'array',
      default: ['image']
    }
  },

  edit: function edit(_ref) {
    var attributes = _ref.attributes,
        setAttributes = _ref.setAttributes,
        clientId = _ref.clientId;
    var dirty = attributes.dirty,
        tabs = attributes.tabs;

    var _select = select('core/block-editor'),
        getBlockOrder = _select.getBlockOrder,
        getBlocks = _select.getBlocks;

    var _useDispatch = useDispatch('core/block-editor'),
        replaceInnerBlocks = _useDispatch.replaceInnerBlocks,
        selectBlock = _useDispatch.selectBlock;

    var getTabs = function getTabs() {
      return getBlocks(clientId);
    };
    var getTabsOrder = function getTabsOrder() {
      return getBlockOrder(clientId);
    };
    var appendTab = function appendTab() {
      var innerTabs = getTabs();
      innerTabs.push(createBlock('undrr/undrr-tabs-section', {}, []));
      replaceInnerBlocks(clientId, innerTabs, false);
      selectBlock(innerTabs.slice(-1)[0].clientId);
    };
    var updateTabs = function updateTabs() {
      var innerTabs = getTabs();
      var newTabs = [];
      innerTabs.forEach(function (block) {
        var _block$attributes = block.attributes,
            id = _block$attributes.id,
            label = _block$attributes.label;

        newTabs.push({
          id: id,
          label: label
        });
      });
      setAttributes({ dirty: 0, tabs: newTabs });
    };

    useEffect(function () {
      if (dirty === 0) {
        if (Object.keys(tabs).length !== getTabs().length) {
          setAttributes({ dirty: Date.now() });
        }
      }
    }, [getTabs().length]);

    useEffect(function () {
      if (dirty > 0) {
        updateTabs();
      }
    }, [dirty]);

    var fields = [{
      control: 'button',
      label: __('Add Tab'),
      isSecondary: true,
      icon: 'insert',
      onClick: function onClick() {
        appendTab();
      }
    }];

    var blockProps = useBlockProps({ className: 'vf-tabs' });
    return React.createElement(
      Fragment,
      null,
      React.createElement(
        InspectorControls,
        null,
        React.createElement(
          PanelBody,
          { title: __('Settings'), initialOpen: true },
          React.createElement(
            IconButton,
            {
              isPrimary: true,
              className: 'wp-block-cloudblocks-feature-box__image-button',
              label: __('Add Tab'),
              icon: 'insert',
              onClick: appendTab
            },
            'Add tab'
          )
        )
      ),
      React.createElement(
        'div',
        _extends({}, blockProps, { 'data-ver': attributes.ver }),
        React.createElement(
          'ul',
          { className: 'vf-tabs__list' },
          attributes.tabs.map(function (tab, i) {
            return React.createElement(
              'li',
              { key: i + tab.id, className: 'vf-tabs__item' },
              React.createElement(
                'a',
                { className: 'vf-tabs__link', onClick: function onClick() {
                    return selectTab(i);
                  } },
                tab.label
              )
            );
          }),
          React.createElement(
            'li',
            { className: 'vf-tabs__item' },
            React.createElement(
              Button,
              _extends({}, fields[0], { isTertiary: true, isSecondary: false }),
              React.createElement(
                'span',
                null,
                fields[0].label
              )
            )
          )
        ),
        React.createElement(InnerBlocks, {
          allowedBlocks: ['undrr/undrr-tabs'],
          template: Array(1).fill(['undrr/undrr-tabs-section'])
        })
      )
    );
  },
  save: function save(_ref2) {
    var className = _ref2.className,
        attributes = _ref2.attributes;

    var blockProps = useBlockProps.save({ className: 'vf-tabs' });

    return React.createElement(
      'div',
      blockProps,
      React.createElement(
        'ul',
        { className: 'vf-tabs__list', 'data-vf-js-tabs': true },
        attributes.tabs.map(function (tab, i) {
          return React.createElement(
            'li',
            { key: i + tab.id, className: 'vf-tabs__item' },
            React.createElement(
              'a',
              { className: 'vf-tabs__link', href: '#vf-tabs__section-' + tab.id },
              tab.label
            )
          );
        })
      ),
      React.createElement(
        'div',
        { className: 'vf-tabs-content', 'data-vf-js-tabs-content': true },
        React.createElement(InnerBlocks.Content, null)
      )
    );
  }
};

var category = {
  slug: 'undrr',
  title: __('UNDRR')
};

var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));

registerBlockType(category.slug + '/undrr-tabs-block', _extends({ category: category.slug }, undrrTabsSettings));